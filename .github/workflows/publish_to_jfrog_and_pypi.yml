name: Push project build to JFrog Artifactory and PyPI

on:
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      branch_to_build:
        description: 'Specify the branch you want to build'
        required: false
        default: $GITHUB_REF
      version_to_build:
        description: 'Specify the version you want to build: use SEMVER format only'
        required: false
        default: "0.0.0.dev"
      build_description:
        description: 'Provide a description for the build'
        required: true
        default: "Custom build"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Deploy
    env:
      ARTIFACTORY_USERNAME: ${{ vars.JFROG_USER }}
      ARTIFACTORY_API_KEY: ${{ secrets.JFROG_API_KEY}}
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_KEY }}

    steps:
      # Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install poetry, build, and publish via release
        if: ${{ github.event_name == 'release' }}
        run: |
          pip install poetry
          poetry self add poetry-version-plugin
          latesttag=${{ github.event.release.tag_name }}
          git checkout ${latesttag}
          make deploy
          echo "latest_tag=${latesttag}" >> $GITHUB_ENV
          echo "release_description=$(echo '${{ github.event.release.body }}' | head -n 1)" >> $GITHUB_ENV
          echo "current_job_status=${{ job.status }}" >> $GITHUB_ENV

      - name: Install poetry, build, and publish via manual workflow dispatch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          pip install poetry
          poetry self add poetry-version-plugin
          git fetch --all
          git checkout ${{ github.event.inputs.branch_to_build }}
          git tag ${{ github.event.inputs.version_to_build }}
          make deploy
          echo "latest_tag=${{ github.event.inputs.version_to_build }}" >> $GITHUB_ENV
          echo "release_description=$(echo '${{ github.event.inputs.build_description }}' | head -n 1)" >> $GITHUB_ENV
          echo "current_job_status=${{ job.status }}" >> $GITHUB_ENV

      - name: Notify Slack of release workflow result
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'C05PLVB1Y04'
          payload-file-path: ".github/workflows/payloads/release_payload.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_WORKABLE_APP_OAUTH_TOKEN }}
